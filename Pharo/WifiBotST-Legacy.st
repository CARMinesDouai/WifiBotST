ArenaForMorphicWifiBot subclass: #ArenaWithLightBulbs	instanceVariableNames: 'lightBulbs'	classVariableNames: ''	poolDictionaries: ''	category: 'WifiBotST-Legacy-LightSensing'!!ArenaWithLightBulbs commentStamp: '' prior: 0!An ArenaWithLightBulbs is an arena that can have different light sources.It is used by LightSensingMorphicWifiBotBody which has two light sensors.Instance Variables	lightBulbs:		<IdentitySet of CicleMorph>lightBulbs	- are circle morphs that are considered as  light bulbs!!ArenaWithLightBulbs methodsFor: 'light bulbs'!addLightBulbAt: relativeCenterPoint color: aColor	|bulb|	bulb := CircleMorph new.	bulb color: aColor.	self addMorph: bulb.	bulb center: relativeCenterPoint + self position.	self lightBulbs add: bulb .	^bulb ! !!ArenaWithLightBulbs methodsFor: 'light bulbs'!removeLightBulbAt: relativeCenterPoint  color: aColor	| bulbToRemove centerPoint |	centerPoint := relativeCenterPoint + self position.	bulbToRemove := self lightBulbs 		detect: [:bulb| 			(bulb center = centerPoint) and: [bulb color = aColor]] 		ifNone: [^self].	self removeMorph: bulbToRemove.	self lightBulbs remove: bulbToRemove! !!ArenaWithLightBulbs methodsFor: 'initialization'!initialize 	super initialize.	self lightBulbs: IdentitySet new! !!ArenaWithLightBulbs methodsFor: 'accessing'!lightBulbs	^ lightBulbs! !!ArenaWithLightBulbs methodsFor: 'accessing'!lightBulbs: anObject	lightBulbs := anObject! !CircleMorph subclass: #LightSensor	instanceVariableNames: 'arena maxLightIntensity minLightIntensity sensitivity'	classVariableNames: ''	poolDictionaries: ''	category: 'WifiBotST-Legacy-LightSensing'!!LightSensor commentStamp: '' prior: 0!A LightSensor is a light sensor that detects any light color.It is situated inside an arena (IV).It computes the cumulative received light intensity (see method receivedLightIntensity) from all light bulbs in the arena.The received light intensity is linear to the distance from the center of the light source to the center of the bulb.If the received intensity computed can not more than maxLightIntensity, neither it can be below minLightIntensity.The higher is the value of sensitivity (IV) the higher can be the distance from the sensor to light sources that are detected.Instance Variables	arena:		<ArenaWithLightBulbs>	minLightIntensity:		<Intteger>	maxLightIntensity:		<Intteger>	sensitivity:		<Number>!!LightSensor methodsFor: 'accessing'!minLightIntensity: anObject	minLightIntensity := anObject! !!LightSensor methodsFor: 'accessing'!sensitivity: anObject	sensitivity := anObject! !!LightSensor methodsFor: 'accessing'!arena: anObject	arena := anObject! !!LightSensor methodsFor: 'accessing'!maxLightIntensity	^ maxLightIntensity! !!LightSensor methodsFor: 'accessing'!sensitivity	^ sensitivity! !!LightSensor methodsFor: 'accessing'!arena	^ arena! !!LightSensor methodsFor: 'accessing'!minLightIntensity	^ minLightIntensity! !!LightSensor methodsFor: 'accessing'!maxLightIntensity: anObject	maxLightIntensity := anObject! !!LightSensor methodsFor: 'sensing'!receivedLightIntensityFrom: bulb	| rawIntensity intensityLoss distance |	distance := (bulb centerInWorld  dist: self centerInWorld).	rawIntensity := self maxLightIntensity - (self sensitivity * distance).	rawIntensity > self maxLightIntensity ifTrue: [^self maxLightIntensity].	rawIntensity < self minLightIntensity ifTrue: [^0].	^rawIntensity! !!LightSensor methodsFor: 'sensing'!sensedBulbs	^self arena lightBulbs! !!LightSensor methodsFor: 'sensing'!sense	|rawTotal|	rawTotal := self sensedBulbs inject: 0 into: [:total :bulb| total + self receivedLightIntensityFrom: bulb].	self receivedLightIntensity: (rawTotal max: self maxLightIntensity)! !!LightSensor methodsFor: 'sensing'!receivedLightIntensity	|rawTotal|	rawTotal := self sensedBulbs inject: 0 into: [:total :bulb| total + (self receivedLightIntensityFrom: bulb)].	^rawTotal min: self maxLightIntensity! !!LightSensor methodsFor: 'initialize-release'!defaultSensitivity	^ 1! !!LightSensor methodsFor: 'initialize-release'!defaultMaxLightIntensity	^ 256! !!LightSensor methodsFor: 'initialize-release'!defaultWidth	^10! !!LightSensor methodsFor: 'initialize-release'!initialize	super initialize.	self maxLightIntensity: self defaultMaxLightIntensity.	self minLightIntensity: self defaultMinLightIntensity.	self sensitivity: self defaultSensitivity.	self width: self defaultWidth! !!LightSensor methodsFor: 'initialize-release'!defaultMinLightIntensity	^ 0! !LightSensor subclass: #ColorLightSensor	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'WifiBotST-Legacy-LightSensing'!!ColorLightSensor commentStamp: '' prior: 0!A ColorLightSensor is a light sensor that senses a single color.!!ColorLightSensor methodsFor: 'sensing'!sensedBulbs	^super sensedBulbs select: [: bulb|		self color = bulb color]! !WifiBotSimulation subclass: #SimpleWifiBotSimlation	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'WifiBotST-Legacy-BotExamples'!!SimpleWifiBotSimlation commentStamp: '' prior: 0!A SimpleSimlation is a simulation with a single robot and a light bulb.Robot only avoid obstacles. !!SimpleWifiBotSimlation methodsFor: 'initialize-release'!initialize	|bot| 	super initialize.	bot := self addRobotInstanceOf: TwoWheeledWifiBot atPosition: 300@500.	bot leftSpeed: 100 rightSpeed: 100.	self addLightBulbAt: 500@300 color: Color green.	self addObstacleAt: 200@0 width: 50  height: 200.	self addObstacleAt: 800@400 width: 50  height: 200! !Object subclass: #WifiBotLeaderFollowerDemo	instanceVariableNames: 'arena leader mission window bot1 bot2'	classVariableNames: ''	poolDictionaries: ''	category: 'WifiBotST-Legacy-BotExamples'!!WifiBotLeaderFollowerDemo commentStamp: '' prior: 0!A leader robot (with infra-red sensors range displayed) has to go to four location (blue dots) while avoiding obstacles and collisions with other robots. Two followers have to keep close to the leader. Because, there is no cooperation, the leader gets sometimes blocked by the two followers and has to find another path to its target.To run the demo, evaluate the following in a workspace"demo := WifiBotLeaderFollowerDemo new.demo show.demo reset.demo start."The following allows stopping the demo"demo stop."!!WifiBotLeaderFollowerDemo methodsFor: 'life-cycle'!robotsInitialPositions	^ {  (500 @ 300). (550 @ 400). (450 @ 400)  }! !!WifiBotLeaderFollowerDemo methodsFor: 'life-cycle'!hide	window delete! !!WifiBotLeaderFollowerDemo methodsFor: 'life-cycle'!reset	leader target: leader pathPoints first.	{leader. bot1. bot2} with: self robotsInitialPositions do: [:bot :center|		bot stepsToWaitBeforeHeadingTowardsTarget: 0.		bot body heading: 0.		bot body centerInArena: center].! !!WifiBotLeaderFollowerDemo methodsFor: 'life-cycle'!start	mission start.	! !!WifiBotLeaderFollowerDemo methodsFor: 'life-cycle'!showAndStart	self show.	self start.	! !!WifiBotLeaderFollowerDemo methodsFor: 'life-cycle'!stop	mission stop.! !!WifiBotLeaderFollowerDemo methodsFor: 'life-cycle'!stopAndHide	self stop.	self hide! !!WifiBotLeaderFollowerDemo methodsFor: 'life-cycle'!show	| targetMorph obstacle |	window := arena openInWindowLabeled: 'Leader and Two Followers'.	window position: 0 @ 0.	leader pathPoints do: 		[ :each | 		targetMorph := CircleMorph new.		targetMorph color: Color blue.		window addMorph: targetMorph.		targetMorph center: each ].	{  (0 @ 320). (500 @ 500). (750 @ 320). (500 @ 0)  } 		with: { 				(300 @ 50).				(50 @ 200).				(300 @ 50).				(50 @ 200)			 }		do: 			[ :center :widthHeight | 			obstacle := RectangleMorph new.			obstacle color: Color black.			arena addMorph: obstacle.			obstacle center: center.			obstacle width: widthHeight x.			obstacle height: widthHeight y ].	{  leader. bot1. bot2  } 		with: self robotsInitialPositions		do: 			[ :bot :center | 			bot body openIn: arena.			bot body scaleWithFactor: 0.5.			bot body centerInArena: center ].	leader body showSensors! !!WifiBotLeaderFollowerDemo methodsFor: 'initialize-release'!initialize	mission := WifiBotMission new.	arena := ArenaForMorphicWifiBot new.	arena mission: mission.	arena		close;		width: 1000;		height: 600.	leader := PathFollowerWifiBot morphic.	leader pathPoints: {		200@175. 		200@500.		800@500.		800@175}.	bot1 := FollowerWifiBot morphic.	bot2 := FollowerWifiBot morphic.	bot2 body openIn: arena.	bot2 body positionInArena: 600 @ 200.	leader forwardSpeed: 40.	bot1 forwardSpeed: 40.	bot2 forwardSpeed: 40.	bot1 target: leader body positionInArena.	bot2 target: leader body positionInArena.	bot1 addbot: leader.	bot2 addbot: leader.! !TestCase subclass: #ArenaWithLightBulbsTest	instanceVariableNames: 'arena'	classVariableNames: ''	poolDictionaries: ''	category: 'WifiBotST-Legacy-LightSensing-Test'!!ArenaWithLightBulbsTest methodsFor: 'setUp-tearDown'!setUp	super setUp.	arena := ArenaWithLightBulbs new! !!ArenaWithLightBulbsTest methodsFor: 'setUp-tearDown'!tearDown 	super tearDown.	arena delete! !!ArenaWithLightBulbsTest methodsFor: 'testing'!testRemovalOfLightBulbsAfterChangingArenaPosition	| bulb |	arena addLightBulbAt: 100@100 color: Color green.	arena position: 300@300. 	arena removeLightBulbAt: 100@100 color: Color green.	self assert: arena lightBulbs isEmpty! !!ArenaWithLightBulbsTest methodsFor: 'testing'!testAdditionOfLightBulbs	| greenBulb redBulb |	arena position: 0@0.	self assert: arena lightBulbs isEmpty.	greenBulb := arena addLightBulbAt: 100@100 color: Color green.	redBulb := arena addLightBulbAt: 200@200 color: Color red.	self assert: arena lightBulbs = {greenBulb. redBulb} asSet.	self assert:  greenBulb center = (100@100). 	self assert:  redBulb center = (200@200). 	self assert: (arena submorphs includesAllOf: arena lightBulbs)! !!ArenaWithLightBulbsTest methodsFor: 'testing'!testRemovalOfLightBulbs	| greenBulb redBulb orangeBulb |	arena position: 0@0.	self assert: arena lightBulbs isEmpty.	arena addLightBulbAt: 100@100 color: Color green.	arena addLightBulbAt: 200@200 color: Color red.	arena addLightBulbAt: 300@300 color: Color orange.	arena removeLightBulbAt: 100@100 color: Color green.	self assert: arena lightBulbs size = 2.	self assert: arena submorphs size = 2.	greenBulb := arena lightBulbs detect: [:bulb| bulb color = Color green] ifNone: [nil].	self assert: greenBulb isNil.	arena removeLightBulbAt:  200@200 color: Color red.	self assert: arena lightBulbs size = 1.	self assert: arena submorphs size = 1.	redBulb := arena lightBulbs detect: [:bulb| bulb color = Color red] ifNone: [nil].	self assert: redBulb isNil.	arena removeLightBulbAt:  300@300 color: Color orange.	self assert: arena lightBulbs isEmpty.	self assert: arena submorphs isEmpty.	orangeBulb := arena lightBulbs detect: [:bulb| bulb color = Color orange] ifNone: [nil].	self assert: orangeBulb isNil.	! !!ArenaWithLightBulbsTest methodsFor: 'testing'!testAddLightBulbAnswersTheNewlyCreatedBulb	|createdBulbs bulbProvidedPositions|	bulbProvidedPositions := {0@0. 100@200. 300@400. 300@200. 500@500}.	createdBulbs := IdentitySet new.	bulbProvidedPositions do: [:point|			createdBulbs add: (arena addLightBulbAt: 100@100 color: Color green)].	self assert: createdBulbs = arena lightBulbs	! !!ArenaWithLightBulbsTest methodsFor: 'testing'!testPositionOfLightBulbsShouldBeRelativeToTheTopLeftCornerOfArena	| bulb |	arena position: 100@100. 	bulb := arena addLightBulbAt: 100@100 color: Color green.	self assert: bulb center = (200@200)! !TestCase subclass: #LightSensingWifiBotBodyTest	instanceVariableNames: 'arena botBody mission'	classVariableNames: ''	poolDictionaries: ''	category: 'WifiBotST-Legacy-LightSensing-Test'!!LightSensingWifiBotBodyTest methodsFor: 'setUp-tearDown'!setUp	super setUp.	mission := WifiBotMission new.	arena := ArenaWithLightBulbs new.	arena mission: mission.	botBody := LightSensingMorphicWifiBotBody new.	arena openInWorld.	botBody bot: WifiBot new.	botBody openIn: arena! !!LightSensingWifiBotBodyTest methodsFor: 'setUp-tearDown'!tearDown 	super tearDown.	mission stop.	arena delete.	botBody delete! !!LightSensingWifiBotBodyTest methodsFor: 'testing'!testSensingCloseLightSource	arena addLightBulbAt: 100@100 color: Color red. 	botBody morph center: 100@100.	self assert:   botBody leftLightSensor receivedLightIntensity > 0.	self assert: botBody rightLightSensor  receivedLightIntensity > 0.! !!LightSensingWifiBotBodyTest methodsFor: 'testing'!testSensorsKnowsArena	self assert: botBody leftLightSensor arena == arena.	self assert: botBody rightLightSensor arena == arena.! !!LightSensingWifiBotBodyTest methodsFor: 'testing'!testSensingAfterBodyMovement	|leftLightSensor rightLightSensor firstLightIntensityReceivedByLeftSensor firstLightIntensityReceivedByRightSensor |	arena addLightBulbAt: 200@200 color: Color red. 	botBody centerInArena: 200@200.	leftLightSensor := botBody leftLightSensor.	rightLightSensor := botBody rightLightSensor.	firstLightIntensityReceivedByLeftSensor := leftLightSensor  receivedLightIntensity.	firstLightIntensityReceivedByRightSensor := rightLightSensor  receivedLightIntensity.	botBody forwardSpeed:  400.	botBody commitActuatorValues. 	self assert: leftLightSensor  receivedLightIntensity > 0.	self assert: leftLightSensor  receivedLightIntensity < firstLightIntensityReceivedByLeftSensor.	self assert: rightLightSensor  receivedLightIntensity > 0.	self assert: rightLightSensor  receivedLightIntensity < firstLightIntensityReceivedByRightSensor	! !!LightSensingWifiBotBodyTest methodsFor: 'testing'!testSensorsMoveWhenBodyMovesRightward	| initialBodyPosition InitialLeftSensorPosition InitialRightSensorPosition |	initialBodyPosition :=  200 @ 200.	botBody heading: 90.	botBody positionInArena: initialBodyPosition.	InitialLeftSensorPosition := botBody leftLightSensor positionInWorld.	InitialRightSensorPosition := botBody rightLightSensor positionInWorld.	botBody forwardSpeed: 100 rotationSpeed: 0.	botBody commitActuatorValues.	self assert: botBody positionInArena =( initialBodyPosition + (20@0)).	self assert: botBody leftLightSensor positionInWorld = (InitialLeftSensorPosition + (20 @ 0)) .	self assert: botBody rightLightSensor positionInWorld = (InitialRightSensorPosition + (20 @ 0)) .	self assert: (botBody leftLightSensor positionInWorld - botBody rightLightSensor positionInWorld) = (InitialLeftSensorPosition - InitialRightSensorPosition).	botBody commitActuatorValues.	self assert: botBody leftLightSensor positionInWorld = (InitialLeftSensorPosition + (40 @ 0)) .	self assert: botBody rightLightSensor positionInWorld = (InitialRightSensorPosition + (40 @ 0)) .	self assert: (botBody leftLightSensor positionInWorld - botBody rightLightSensor positionInWorld) = (InitialLeftSensorPosition - InitialRightSensorPosition)! !!LightSensingWifiBotBodyTest methodsFor: 'testing'!testSensorsMoveWhenBodyMovesUpward	| InitialLeftSensorPosition InitialRightSensorPosition |	botBody positionInArena: 200.0 @ 200.0.	InitialLeftSensorPosition := botBody leftLightSensor positionInWorld.	InitialRightSensorPosition := botBody rightLightSensor positionInWorld.	botBody forwardSpeed: 100 rotationSpeed: 0.	botBody commitActuatorValues.	self assert: botBody leftLightSensor positionInWorld = (InitialLeftSensorPosition - (0 @ 20)) .	self assert: botBody rightLightSensor positionInWorld = (InitialRightSensorPosition - (0 @ 20)) .	self assert: (botBody leftLightSensor positionInWorld - botBody rightLightSensor positionInWorld) = (InitialLeftSensorPosition - InitialRightSensorPosition).	botBody commitActuatorValues.	self assert: botBody leftLightSensor positionInWorld = (InitialLeftSensorPosition - (0 @ 40)) .	self assert: botBody rightLightSensor positionInWorld = (InitialRightSensorPosition - (0 @ 40)) .	self assert: (botBody leftLightSensor positionInWorld - botBody rightLightSensor positionInWorld) = (InitialLeftSensorPosition - InitialRightSensorPosition)! !TestCase subclass: #LightSensorTest	instanceVariableNames: 'arena sensor'	classVariableNames: ''	poolDictionaries: ''	category: 'WifiBotST-Legacy-LightSensing-Test'!!LightSensorTest methodsFor: 'setUp-tearDown'!lightSensorClass	^LightSensor! !!LightSensorTest methodsFor: 'setUp-tearDown'!setUp	super setUp.	arena := ArenaWithLightBulbs new.	sensor := self lightSensorClass new.	sensor arena: arena.	arena addMorph: sensor.	sensor center: 0@0.	sensor maxLightIntensity: 100.	sensor minLightIntensity: 0.	sensor sensitivity: 1! !!LightSensorTest methodsFor: 'setUp-tearDown'!tearDown 	super tearDown.	sensor delete! !!LightSensorTest methodsFor: 'testing'!testLightReceivedFromMultipleBulbesWithDistantLocations	|positionToExpectedReceivedIntensityDict|	arena addLightBulbAt: 0@0 color: Color green.	arena addLightBulbAt: 0@175 color: Color green.	positionToExpectedReceivedIntensityDict := Dictionary newFrom:  {	(0@0)->100. 	(0@25) -> 75. 	(0@50) -> 50.	(0@75) -> 25. 	(0@100) -> 25.	(0@125) -> 50.	(0@150) -> 75.	(0@175) -> 100.	(0@200) -> 75}.	positionToExpectedReceivedIntensityDict keysAndValuesDo: [:position :expectedReceivedIntensity|			sensor center: position.		self assert: (sensor receivedLightIntensity) = expectedReceivedIntensity.]! !!LightSensorTest methodsFor: 'testing'!testSensorGeometry	self assert: sensor width = 10.	self assert: sensor height = 10.	! !!LightSensorTest methodsFor: 'testing'!testLightReceivedFromMultipleBulbesWithCloseLocations	|positionToExpectedReceivedIntensityDict|	arena addLightBulbAt: 0@0 color: Color green.	arena addLightBulbAt: 0@100 color: Color green.	positionToExpectedReceivedIntensityDict := Dictionary newFrom:  {	(0@0)->100. 	(0@25) -> 100. 	(0@50) -> 100.	(0@75) -> 100. 	(0@100) -> 100.	(0@150) -> 50.	(0@200) -> 0.}.	positionToExpectedReceivedIntensityDict keysAndValuesDo: [:position :expectedReceivedIntensity|			sensor center: position.		self assert: (sensor receivedLightIntensity) = expectedReceivedIntensity.]! !!LightSensorTest methodsFor: 'testing'!testLightReceivedFromASingleBulbe	| positionToExpectedReceivedIntensityDict |	arena addLightBulbAt: 0@0 color: Color green.	positionToExpectedReceivedIntensityDict := Dictionary newFrom:  {	(0@0)->100. 	(0@50) -> 50. 	(50@0) -> 50. 	(0@100) -> 0.	(100@0) -> 0.	(0@101) -> 0.	(101@0) -> 0.	(293@539) -> 0.}.	positionToExpectedReceivedIntensityDict keysAndValuesDo: [:position :expectedReceivedIntensity|			sensor center: position.		self assert: (sensor receivedLightIntensity) = expectedReceivedIntensity.	].	! !!LightSensorTest methodsFor: 'testing'!testLightReceivedFromMultipleBulbesWithTheSameLocation	|positionToExpectedReceivedIntensityDict|	2 timesRepeat: [arena addLightBulbAt: 0@0 color: Color green].	positionToExpectedReceivedIntensityDict := Dictionary newFrom:  {	(0@0)->100. 	(0@50) -> 100. 	(50@0) -> 100. 	(0@75) -> 50. 	(75@0) -> 50. 	(0@100) -> 0.	(100@0) -> 0.	(0@101) -> 0.	(101@0) -> 0.	(293@539) -> 0.}.	positionToExpectedReceivedIntensityDict keysAndValuesDo: [:position :expectedReceivedIntensity|			sensor center: position.		self assert: (sensor receivedLightIntensity) = expectedReceivedIntensity.	].	! !LightSensorTest subclass: #ColorLightSensorTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'WifiBotST-Legacy-LightSensing-Test'!!ColorLightSensorTest methodsFor: 'testing'!testSensingSingleBulbWithSameColor	arena addLightBulbAt: sensor center color: sensor color.	self assert: sensor receivedLightIntensity = 100! !!ColorLightSensorTest methodsFor: 'testing'!testBulbWithDifferentColorIsNotSensed	arena addLightBulbAt: sensor center color: Color green.	self deny: arena lightBulbs anyOne color = sensor color.	self assert: sensor receivedLightIntensity = 0! !!ColorLightSensorTest methodsFor: 'setUp-tearDown'!lightSensorClass	^ColorLightSensor! !!ColorLightSensorTest methodsFor: 'setUp-tearDown'!setUp 	super setUp.	sensor color: Color red! !Object subclass: #JoystickDriverForWifiBot	instanceVariableNames: 'bot'	classVariableNames: ''	poolDictionaries: ''	category: 'WifiBotST-Legacy-JoystickDrivenBot'!!JoystickDriverForWifiBot methodsFor: 'accessing'!body	^self bot body! !!JoystickDriverForWifiBot methodsFor: 'accessing'!bot	^bot! !!JoystickDriverForWifiBot methodsFor: 'accessing'!bot: anObject	bot := anObject! !!JoystickDriverForWifiBot methodsFor: 'updating'!update: joystick 	self bot forwardSpeed: joystick upDown asInteger;		 rotationSpeed: joystick leftRight asInteger! !!JoystickDriverForWifiBot methodsFor: 'stepping'!step	self bot step! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!JoystickDriverForWifiBot class	instanceVariableNames: ''!!JoystickDriverForWifiBot class methodsFor: 'instance creation'!onMorphicBot	^ self onBot: self defaultBotClass morphic! !!JoystickDriverForWifiBot class methodsFor: 'instance creation'!defaultBotClass	^ ObstacleAvoiderWifiBot ! !!JoystickDriverForWifiBot class methodsFor: 'instance creation'!onBot: bot 	^ self new bot: bot;		 yourself! !Object subclass: #UpdateCounter	instanceVariableNames: 'count'	classVariableNames: ''	poolDictionaries: ''	category: 'WifiBotST-Legacy-JoystickDrivenBot'!!UpdateCounter methodsFor: 'accessing'!count: anObject	count := anObject! !!UpdateCounter methodsFor: 'accessing'!count	^count! !!UpdateCounter methodsFor: 'updating'!update: aParameter	super update: aParameter.	self count: self count + 1! !!UpdateCounter methodsFor: 'initialize-release'!initialize	super initialize.	self count: 0! !TestCase subclass: #WifiBotJoystickMorphTest	instanceVariableNames: 'joystick'	classVariableNames: ''	poolDictionaries: ''	category: 'WifiBotST-Legacy-JoystickDrivenBot'!!WifiBotJoystickMorphTest methodsFor: 'running'!testAddRemoveDependents	|updateCounter|	updateCounter := UpdateCounter new.	joystick addDependent: updateCounter.	self assert: joystick dependents size = 1.	self assert: joystick dependents anyOne == updateCounter.	self assert: updateCounter count = 0.	3 timesRepeat: [joystick notifyDependents].	self assert: updateCounter count = 3.	joystick removeDependent: updateCounter.	self assert: joystick dependents isEmpty.	3 timesRepeat: [joystick notifyDependents].	self assert: updateCounter count = 3.! !!WifiBotJoystickMorphTest methodsFor: 'running'!testDependents	| dependentsArray |	self		assert: (joystick class instVarNames includes: #dependents).	dependentsArray := #().	joystick instVarNamed: #dependents put: dependentsArray.	self assert: joystick dependents == dependentsArray! !!WifiBotJoystickMorphTest methodsFor: 'running'!testLeftRightValues	| maxLeft maxRight handleMorph handleY |	self assert: joystick upDown = 0.	handleMorph := joystick handleMorph.	handleY := handleMorph position y.	maxLeft := joystick position x.	handleMorph position: maxLeft @ handleY.	self assert: joystick leftRight = -60.	maxRight := maxLeft + joystick width - handleMorph width.	handleMorph position: maxRight @ handleY.	self assert: joystick leftRight = 60.	handleMorph center: joystick center.	self assert: joystick upDown = 0! !!WifiBotJoystickMorphTest methodsFor: 'running'!testUpDownValues	| maxUp maxDown handleMorph handleX |	self assert: joystick upDown = 0.	handleMorph := joystick handleMorph.	handleX := handleMorph position x.	maxUp := joystick position y.	handleMorph position: handleX @ maxUp.	self assert: joystick upDown = 120.	maxDown := maxUp + joystick height- handleMorph height.	handleMorph position: handleX @ maxDown.	self assert: joystick upDown = -120.	handleMorph center: joystick center.	self assert: joystick upDown = 0! !!WifiBotJoystickMorphTest methodsFor: 'setUp-tearDown'!setUp	super setUp.	joystick := WifiBotJoystickMorph new! !Object subclass: #WifiBotSimulation	instanceVariableNames: 'arena mission window robotInitialPositionsDict'	classVariableNames: ''	poolDictionaries: ''	category: 'WifiBotST-Legacy-Kernel'!!WifiBotSimulation commentStamp: '' prior: 0!A WifiBotSimulation is a facility class to manage simple a graphical 2D simulation.Instance Variables	arena:		<ArenaWithLightBulbs>	mission:		<WifiBotMission>	robotInitialPositionsDict:		<Dictionary of Points>	window:		<SystemWindow>arena	- Arena where bots bodies move and actmission	- It is the engine that drives the simulationrobotInitialPositionsDict	- Dicationary of initial positions of robots in arena. Robots are put back to there initial positions on every reset.window	- SystemWindow which contains the arena.!!WifiBotSimulation methodsFor: 'running'!reset	self moveRobotsToInitialPositions! !!WifiBotSimulation methodsFor: 'running'!stop	(self mission) stop.! !!WifiBotSimulation methodsFor: 'running'!start	(self mission) start! !!WifiBotSimulation methodsFor: 'initialize-release'!addObstacleAt: aPoint width: width height:  height	^self arena addObstacleAt: aPoint width: width height:  height ! !!WifiBotSimulation methodsFor: 'initialize-release'!addRobot: bot atPosition: aPoint	self robotInitialPositionsDict at: bot put: aPoint.	bot body openIn: self arena.	bot body centerInArena: aPoint! !!WifiBotSimulation methodsFor: 'initialize-release'!arenaClass	^ArenaWithLightBulbs! !!WifiBotSimulation methodsFor: 'initialize-release'!addLightBulbAt: aPoint color: aColor	^self arena addLightBulbAt: aPoint color: aColor ! !!WifiBotSimulation methodsFor: 'initialize-release'!addRobotInstanceOf: robotClass atPosition: aPoint	|bot|	bot := robotClass morphic.	self addRobot: bot atPosition: aPoint.	^bot! !!WifiBotSimulation methodsFor: 'initialize-release'!missionClass	^WifiBotMission! !!WifiBotSimulation methodsFor: 'initialize-release'!initialize	super initialize.	self robotInitialPositionsDict: IdentityDictionary new.	self mission: self missionClass new.	self arena: self arenaClass new.	self arena mission: self mission.	(self arena)		close;		width: 1000;		height: 600.! !!WifiBotSimulation methodsFor: 'initialize-release'!moveRobotsToInitialPositions	self robotInitialPositionsDict keysAndValuesDo: [:robot :initialPosition|		robot body centerInArena: initialPosition]! !!WifiBotSimulation methodsFor: 'accessing'!window	^ window! !!WifiBotSimulation methodsFor: 'accessing'!robotInitialPositionsDict	^ robotInitialPositionsDict! !!WifiBotSimulation methodsFor: 'accessing'!robotInitialPositionsDict: anObject	robotInitialPositionsDict := anObject! !!WifiBotSimulation methodsFor: 'accessing'!window: anObject	window := anObject! !!WifiBotSimulation methodsFor: 'accessing'!arena: anObject	arena := anObject! !!WifiBotSimulation methodsFor: 'accessing'!mission: anObject	mission := anObject! !!WifiBotSimulation methodsFor: 'accessing'!arena	^ arena! !!WifiBotSimulation methodsFor: 'accessing'!mission	^ mission! !!WifiBotSimulation methodsFor: 'accessing'!robots	^self robotInitialPositionsDict keys! !!WifiBotSimulation methodsFor: 'displaying'!hide	self stop.	self deleteWindow! !!WifiBotSimulation methodsFor: 'displaying'!deleteWindow	self window ifNil: [ ^ self ].	(self window)		makeClosable;		delete! !!WifiBotSimulation methodsFor: 'displaying'!windowInitialPosition	^100 @ 100! !!WifiBotSimulation methodsFor: 'displaying'!windowLabel	^ self className! !!WifiBotSimulation methodsFor: 'displaying'!show	self deleteWindow.	self window: (self arena openInWindowLabeled: self windowLabel).	self window position: self windowInitialPosition.	(self window) makeUnclosable! !TestCase subclass: #AbstractWifiBotBodyTest	instanceVariableNames: 'botBody'	classVariableNames: ''	poolDictionaries: ''	category: 'WifiBotST-Legacy-Kernel-Test'!!AbstractWifiBotBodyTest methodsFor: 'setUp-tearDown'!botBodyClass	self subclassResponsibility! !!AbstractWifiBotBodyTest methodsFor: 'setUp-tearDown'!setUpBotBody	botBody := self botBodyClass new! !!AbstractWifiBotBodyTest methodsFor: 'setUp-tearDown'!setUp	self setUpBotBody! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!AbstractWifiBotBodyTest class	instanceVariableNames: ''!!AbstractWifiBotBodyTest class methodsFor: 'testing'!isAbstract	^ self == AbstractWifiBotBodyTest ! !TestCase subclass: #ClosedArenaForMorphicWifiBotTest	instanceVariableNames: 'arena bot botMorph'	classVariableNames: ''	poolDictionaries: ''	category: 'WifiBotST-Legacy-Kernel-Test'!!ClosedArenaForMorphicWifiBotTest methodsFor: 'running'!testBorderObstaclesLocked	arena borders		do: [:border | self assert: border isLocked]! !!ClosedArenaForMorphicWifiBotTest methodsFor: 'running'!testRemovedBotIsDeletedFromMission	| botFlexShell |	botFlexShell := botMorph owner.	arena addMorph: botFlexShell.	arena removeMorph: botFlexShell.	self		deny: (arena submorphs includes: botFlexShell);				deny: (arena mission bots includes: bot)! !!ClosedArenaForMorphicWifiBotTest methodsFor: 'running'!assertArenaBordersPositions	| topBorderPosition bottomBorderPosition leftBorderPosition rightBorderPosition arenaPosition |	topBorderPosition := arena topBorder position.	bottomBorderPosition := arena bottomBorder position.	leftBorderPosition := arena leftBorder position.	rightBorderPosition := arena rightBorder position.	arenaPosition := arena position.	self assert: topBorderPosition x = arenaPosition x.	self assert: topBorderPosition y = (arenaPosition y - 1).	self assert: bottomBorderPosition x = arenaPosition x.	self assert: bottomBorderPosition y = (arenaPosition y + arena height + 1).	self assert: leftBorderPosition x = (arenaPosition x - 1).	self assert: leftBorderPosition y = arenaPosition y.	self assert: rightBorderPosition x = (arenaPosition x + arena width + 1).	self assert: rightBorderPosition y = arenaPosition y! !!ClosedArenaForMorphicWifiBotTest methodsFor: 'running'!testArenaClipping	self assert: arena clipSubmorphs! !!ClosedArenaForMorphicWifiBotTest methodsFor: 'running'!assertArenaBordersPositionsAndSizes	self assertArenaBordersPositions.	self assertArenaBordersSizes! !!ClosedArenaForMorphicWifiBotTest methodsFor: 'running'!testAddedBotIsLinkedtoMission	| botFlexShell |	botFlexShell := botMorph owner.	arena addMorph: botFlexShell.	self		assert: (arena submorphs includes: botFlexShell);				assert: (arena mission bots includes: bot)! !!ClosedArenaForMorphicWifiBotTest methodsFor: 'running'!assertArenaBordersSizes	arena close.	self assert: arena topBorder width = arena width.	self assert: arena topBorder height = 100.	self assert: arena bottomBorder width = arena width.	self assert: arena bottomBorder height = 100.	self assert: arena leftBorder height = arena height.	self assert: arena leftBorder width = 100.	self assert: arena rightBorder height = arena height.	self assert: arena rightBorder width = 100! !!ClosedArenaForMorphicWifiBotTest methodsFor: 'running'!testBorderObstaclesUpdatedOnResize	arena width: 300.	arena height: 400.	arena extent: 250 @ 350.	self assertArenaBordersSizes! !!ClosedArenaForMorphicWifiBotTest methodsFor: 'setUp-tearDown'!setUp	arena := ArenaForMorphicWifiBot new.	arena mission: WifiBotMission new.	arena close.	bot := ObstacleAvoiderWifiBot morphic.	botMorph := bot body morph.	botMorph openInWorld! !!ClosedArenaForMorphicWifiBotTest methodsFor: 'setUp-tearDown'!tearDown	arena delete.	botMorph delete! !AbstractWifiBotBodyTest subclass: #MorphicWifiBotBodyTest	instanceVariableNames: 'obstacle arena'	classVariableNames: ''	poolDictionaries: ''	category: 'WifiBotST-Legacy-Kernel-Test'!!MorphicWifiBotBodyTest methodsFor: 'setUp-tearDown'!botBodyClass	^ MorphicWifiBotBody! !!MorphicWifiBotBodyTest methodsFor: 'setUp-tearDown'!tearDown	botBody delete.	obstacle delete.	arena delete! !!MorphicWifiBotBodyTest methodsFor: 'setUp-tearDown'!setUp	super setUp.	arena := RectangleMorph new.	arena		color: Color yellow;		width: World width;		height: World height.	arena openInWorld.	obstacle := RectangleMorph new.	self openBotBodyInArena.	arena addMorph: obstacle! !!MorphicWifiBotBodyTest methodsFor: 'setUp-tearDown'!openBotBodyInArena	botBody openIn: arena! !!MorphicWifiBotBodyTest methodsFor: 'running'!testMoveForward	| currentPosition |	botBody forwardSpeed: 100 rotationSpeed: 0.	currentPosition := 200.0 @ 200.0.	botBody positionInArena: currentPosition.	10		timesRepeat: [botBody commitActuatorValues.			"By default the bot moves towards the top"			currentPosition := currentPosition - (0 @ 20).			Processor yield.			self assert: botBody positionInArena = currentPosition]! !!MorphicWifiBotBodyTest methodsFor: 'running'!testTurnToRight	self testMoveWhileTurningAt: 90! !!MorphicWifiBotBodyTest methodsFor: 'running'!testDoNotMoveIfBatteryEmpty	| initialPosition |	botBody batteryLevel: 0.	initialPosition := 400 @ 400.	botBody positionInArena: initialPosition.	botBody forwardSpeed: 10 rotationSpeed: 0.	10 timesRepeat: [botBody commitActuatorValues].	self assert: botBody positionInArena = initialPosition! !!MorphicWifiBotBodyTest methodsFor: 'running'!testFarObstacleSensing	| botPosition distanceToObstacleTop |	botPosition := 400 @ 400.	botBody positionInArena: botPosition.	obstacle width: self botMorph width.	distanceToObstacleTop := 150 + obstacle height.	obstacle position: botPosition - (0 @ distanceToObstacleTop).	self assert: botBody distanceToLeftObstacles = 150.	self assert: botBody distanceToRightObstacles = 150.	obstacle position: obstacle position - (0 @ 1).	self assert: botBody distanceToLeftObstacles = 150.	self assert: botBody distanceToRightObstacles = 150! !!MorphicWifiBotBodyTest methodsFor: 'running'!testTurnOnItself	| originCenter |	botBody forwardSpeed: 0 rotationSpeed: 10.	botBody positionInArena: 100 @ 100.	originCenter := botBody centerInArena.	40 timesRepeat: 			[botBody commitActuatorValues.			self assert: (botBody centerInArena x - originCenter x) abs <= 2.			self assert: (botBody centerInArena y - originCenter y) abs <= 2]! !!MorphicWifiBotBodyTest methodsFor: 'running'!testTurnToLeft	self testMoveWhileTurningAt: -90! !!MorphicWifiBotBodyTest methodsFor: 'running'!testBatteryLevelDecrease	| firstBatteryLevel lastBatteryLevel |	firstBatteryLevel := botBody batteryLevel.	self assert: firstBatteryLevel = 255.	botBody forwardSpeed: 0 rotationSpeed: 60.	1000 timesRepeat: [botBody commitActuatorValues].	lastBatteryLevel := botBody batteryLevel.	self assert: lastBatteryLevel < firstBatteryLevel.	self assert: (lastBatteryLevel closeTo: 245)! !!MorphicWifiBotBodyTest methodsFor: 'running'!testVerticallObstacleSensing	| distanceToObstacle |	obstacle width: self botMorph width;		 height: self botMorph width.	botBody positionInArena: 400 @ 400.	distanceToObstacle := 100.	botBody heading: 0.	obstacle bottom: self botMorph boundsInWorld top - distanceToObstacle.	obstacle left: self botMorph boundsInWorld left.	self assert: botBody distanceToLeftObstacles = distanceToObstacle.	self assert: botBody distanceToRightObstacles = distanceToObstacle.	botBody heading: 180.	obstacle top: self botMorph boundsInWorld bottom + distanceToObstacle.	self assert: botBody distanceToLeftObstacles = distanceToObstacle.	self assert: botBody distanceToRightObstacles = distanceToObstacle! !!MorphicWifiBotBodyTest methodsFor: 'running'!testWheelSpeedsEqualOnForwardMove	| expectedWheelSpeed |	botBody forwardSpeed: 10 rotationSpeed: 0.	expectedWheelSpeed := botBody wheelSpeeds anyOne.	self assert: (botBody wheelSpeeds 				allSatisfy: [:speed | speed = expectedWheelSpeed])! !!MorphicWifiBotBodyTest methodsFor: 'running'!testMoveWhileTurningAt: rotationSpeed 	| originPosition currentHeading |	botBody forwardSpeed: 50 rotationSpeed: rotationSpeed * 5. "botBody morph speedRatio."	originPosition := 100 @ 100.	botBody positionInArena: originPosition.	currentHeading := 0 asFloat.	40		timesRepeat: [botBody commitActuatorValues.			currentHeading := currentHeading + rotationSpeed.			self assert: (botBody heading - currentHeading) abs < (1 / 10)].	self assert: (botBody positionInArena x - originPosition x) abs <= 2.	self assert: (botBody positionInArena y - originPosition y) abs <= 2! !!MorphicWifiBotBodyTest methodsFor: 'running'!testPositionSensing	| originPosition expectedRelativePositions theoriticalRelativePositions |	originPosition := 400 @ 400.	botBody positionInArena: originPosition.	self assert: botBody currentPositionRelativeToOrigin = (0 @ 0).	theoriticalRelativePositions := {-50 @ 0. -50 @ 50. 0 @ 50. 0 @ 0}.	expectedRelativePositions := theoriticalRelativePositions				collect: [:position | 					botBody forwardSpeed: 0 rotationSpeed: -450.					"A rotation speed of value -450 leads to changing the					heading by -90"					botBody commitActuatorValues.					position + botBody positionInArena - originPosition].	self assert: botBody currentPositionRelativeToOrigin = (0 @ 0).	expectedRelativePositions		do: [:position | 			botBody forwardSpeed: 0 rotationSpeed: -450.			botBody commitActuatorValues.			"A forward speed of value 250 leads to move by 50"			botBody forwardSpeed: 250 rotationSpeed: 0.			botBody commitActuatorValues.			self assert: botBody currentPositionRelativeToOrigin = position]! !!MorphicWifiBotBodyTest methodsFor: 'running'!testRightObstacleSensing	| obstacleInitialBottom botBoundsInWorld |	botBody positionInArena: 400 @ 400.	self assert: botBody distanceToLeftObstacles = 150.	self assert: botBody distanceToRightObstacles = 150.	obstacle width: self botMorph width / 2.	botBoundsInWorld := self botMorph boundsInWorld.	obstacle right: botBoundsInWorld right.	obstacle bottom: botBoundsInWorld top.	obstacleInitialBottom := obstacle bottom.	10		to: 150		by: 10		do: [:deltaY | 			obstacle bottom: obstacleInitialBottom - deltaY.			self assert: botBody distanceToLeftObstacles = 150.			self assert: botBody distanceToRightObstacles = deltaY]! !!MorphicWifiBotBodyTest methodsFor: 'running'!testLeftObstacleSensing	| botPosition obstacleInitialPosition |	botPosition := 400 @ 400.	botBody positionInArena: botPosition.	self assert: botBody distanceToLeftObstacles = 150.	self assert: botBody distanceToRightObstacles = 150.	obstacle width: self botMorph width / 4.	obstacleInitialPosition := botPosition - (0 @ obstacle height).	10		to: 150		by: 10		do: [:deltaY | 			obstacle position: obstacleInitialPosition - (0 @ deltaY).			self assert: botBody distanceToLeftObstacles = deltaY.			self assert: botBody distanceToRightObstacles = 150]! !!MorphicWifiBotBodyTest methodsFor: 'running'!testNearObstacleSensing	| botPosition |	botPosition := 400 @ 400.	botBody positionInArena: botPosition.	obstacle width: self botMorph width.	obstacle position: botPosition - (0 @ obstacle height).	self assert: botBody distanceToLeftObstacles = 0.	self assert: botBody distanceToRightObstacles = 0.	obstacle position: botPosition.	self assert: botBody distanceToLeftObstacles = 150.	self assert: botBody distanceToRightObstacles = 150! !!MorphicWifiBotBodyTest methodsFor: 'running'!testMaxWheelSpeedForMaxForwardSpeed	| expectedWheelSpeed |	botBody forwardSpeed: botBody maxForwardSpeed rotationSpeed: 0.	expectedWheelSpeed := botBody maxWheelSpeed.	self		assert: (botBody wheelSpeeds				allSatisfy: [:speed | speed = expectedWheelSpeed])! !!MorphicWifiBotBodyTest methodsFor: 'running'!testCenter	| expectedCenter |	expectedCenter := 100 @ 100.	botBody centerInArena: expectedCenter.	self assert: botBody centerInArena = expectedCenter! !!MorphicWifiBotBodyTest methodsFor: 'running'!testHorizontalObstacleSensing	| distanceToObstacle |	obstacle width: self botMorph width;		 height: self botMorph width.	botBody positionInArena: 400 @ 400.	botBody heading: 90.	distanceToObstacle := 100.	obstacle top: self botMorph boundsInWorld top.	obstacle left: self botMorph boundsInWorld right + distanceToObstacle.	self assert: botBody distanceToLeftObstacles = distanceToObstacle.	self assert: botBody distanceToRightObstacles = distanceToObstacle.	botBody heading: -90.	obstacle right: self botMorph boundsInWorld left - distanceToObstacle.	self assert: botBody distanceToLeftObstacles = distanceToObstacle.	self assert: botBody distanceToRightObstacles = distanceToObstacle! !!MorphicWifiBotBodyTest methodsFor: 'accessing'!botMorph	^ botBody morph! !MorphicWifiBotBodyTest subclass: #MorphicWifiBotBodyDisplayingTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'WifiBotST-Legacy-Kernel-Test'!!MorphicWifiBotBodyDisplayingTest methodsFor: 'setUp-tearDown'!openBotBodyInArena	"Nothing to do because the test case is about openning"! !!MorphicWifiBotBodyDisplayingTest methodsFor: 'running'!testTransformMorphIsNotLostWhenOpenningInHand	botBody openInHand.	botBody openIn: arena.	self assert: botBody morph isFlexed! !!MorphicWifiBotBodyDisplayingTest methodsFor: 'running'!testExtraTransformMorphCreatedWhenOpenningInHand	| expectedArenaTransformMorphs originalAreanTransformMorphs actualArenaTransformMorphs expectedWorldTransformMorphs actualWorldTransformMorphs |	expectedWorldTransformMorphs := (World submorphs				select: [:morph | morph isKindOf: TransformMorph]) asSet.	originalAreanTransformMorphs := (arena submorphs				select: [:morph | morph isKindOf: TransformMorph]) asSet.	botBody openInHand.	botBody openIn: arena.	actualWorldTransformMorphs := (World submorphs				select: [:morph | morph isKindOf: TransformMorph]) asSet.	self assert: expectedWorldTransformMorphs = actualWorldTransformMorphs.	actualArenaTransformMorphs := (arena submorphs				select: [:morph | morph isKindOf: TransformMorph]) asSet.	expectedArenaTransformMorphs := originalAreanTransformMorphs copyWith: botBody morph owner.	self assert: actualArenaTransformMorphs = expectedArenaTransformMorphs.	self assert: World activeHand submorphs size = 0! !!MorphicWifiBotBodyDisplayingTest methodsFor: 'running'!testObstacleDetectionWhenOpenningInHand	botBody openInHand.	botBody openIn: arena.	self testNearObstacleSensing ! !TestCase subclass: #TwoWheeledWifiBotTest	instanceVariableNames: 'arena mission robot botBody'	classVariableNames: ''	poolDictionaries: ''	category: 'WifiBotST-Legacy-BotExamples-Tests'!!TwoWheeledWifiBotTest methodsFor: 'setUp-tearDown'!setUp 	super setUp.	mission := WifiBotMission new.	arena := ArenaWithLightBulbs new.	arena mission: mission.	arena openInWorld.	robot := TwoWheeledWifiBot morphic.	botBody := 	robot body.	botBody openIn: arena! !!TwoWheeledWifiBotTest methodsFor: 'setUp-tearDown'!tearDown	super tearDown.	mission stop.	arena delete.	botBody delete! !!TwoWheeledWifiBotTest methodsFor: 'testing'!testSpeedSetup	robot leftSpeed: -100 rightSpeed: 200.	self assert: robot leftSpeed = -100.	self assert: robot rightSpeed = 200.	robot leftSpeed: 50 rightSpeed: 60.	self assert: robot leftSpeed = 50.	self assert: robot rightSpeed = 60.	robot leftSpeed: 80 rightSpeed: 120.	self assert: robot leftSpeed = 80.	self assert: robot rightSpeed = 120.! !!TwoWheeledWifiBotTest methodsFor: 'testing'!testMaxLeftLightIntensity	{50. 100. 200} do: [:max|		robot body  leftLightSensor maxLightIntensity: max.		self assert: robot maxLeftLightIntensity =  max].! !!TwoWheeledWifiBotTest methodsFor: 'testing'!testSensing	| bulb leftLightSensorCenter rightLightSensorCenter distanceBetweenLightSensors maxLightIntensityOfSensors |	botBody centerInArena: 100@100.	leftLightSensorCenter := botBody leftLightSensor centerInWorld.	rightLightSensorCenter := botBody rightLightSensor centerInWorld.	distanceBetweenLightSensors	:= leftLightSensorCenter dist: rightLightSensorCenter.	bulb := arena addLightBulbAt: 0@0 color: Color green.	maxLightIntensityOfSensors := 256. 	bulb centerInWorld: leftLightSensorCenter.	self assert: robot lightReceivedByLeftSensor = maxLightIntensityOfSensors.	self assert: robot lightReceivedByRightSensor = (maxLightIntensityOfSensors - distanceBetweenLightSensors).	bulb centerInWorld: rightLightSensorCenter.	self assert: robot lightReceivedByLeftSensor = (maxLightIntensityOfSensors - distanceBetweenLightSensors)..	self assert: robot lightReceivedByRightSensor = maxLightIntensityOfSensors! !!TwoWheeledWifiBotTest methodsFor: 'testing'!testMaxRigtLightIntensity	{50. 100. 200} do: [:max|		robot body  rightLightSensor maxLightIntensity: max.		self assert: robot maxRightLightIntensity =  max].! !!TwoWheeledWifiBotTest methodsFor: 'testing'!testIndividualSpeedSetupForRotationToTheLeft	robot leftSpeed: -50 rightSpeed: 50.	self assert: robot forwardSpeed = 0.	self assert: robot rotationSpeed = -100.	 ! !!TwoWheeledWifiBotTest methodsFor: 'testing'!testIndividualSpeedSetupForForwardMovement	robot leftSpeed: 100 rightSpeed: 100.	self assert: robot forwardSpeed = 100.	self assert: robot rotationSpeed = 0.	 ! !!TwoWheeledWifiBotTest methodsFor: 'testing'!testIndividualSpeedSetupForRotationToTheRight	robot leftSpeed: 50 rightSpeed: -50.	self assert: robot forwardSpeed = 0.	self assert: robot rotationSpeed = 100.	 ! !!TwoWheeledWifiBotTest methodsFor: 'testing'!testIndividualSpeedSetupForBackwardMovement	robot leftSpeed: -100 rightSpeed: -100.	self assert: robot forwardSpeed = -100.	self assert: robot rotationSpeed = 0.	 ! !!TwoWheeledWifiBotTest methodsFor: 'testing'!testCenter	{10@10. 450@100. 60@200. 280@500} do: [:center|		robot body morph centerInArena:  center.		self assert: robot center = center] ! !!TwoWheeledWifiBotTest methodsFor: 'testing'!testHeading	{10. 45. 60. 90. 180. 280} do: [:angle|		robot body morph heading: angle.		self assert: robot heading rounded = angle ] ! !PasteUpMorph subclass: #ArenaForMorphicWifiBot	instanceVariableNames: 'isClosed topBorder bottomBorder leftBorder rightBorder mission'	classVariableNames: ''	poolDictionaries: ''	category: 'WifiBotST-Legacy-Kernel GUI'!!ArenaForMorphicWifiBot commentStamp: '' prior: 0!A ClosedArenaForMorphicWifiBot is an arena with "obstacles" on its borders.Robots are supposed to detect those obstacles and remain inside the visible area of the arena.Example. Evaluate:ClosedArenaForMorphicWifiBot demoWithSingleBot!!ArenaForMorphicWifiBot methodsFor: 'initialization'!addRandomSmallObstacles: obstaclesCount	| xInterval yInterval x y obstacle |	xInterval := 50 to: self width - 50.	yInterval := 50 to: self height - 50.	obstaclesCount timesRepeat:			[ x := xInterval atRandom.			y := yInterval atRandom.			self addObstacleAt: x @ y				width: 50				height: 50 ]! !!ArenaForMorphicWifiBot methodsFor: 'initialization'!minHeight	^ 300! !!ArenaForMorphicWifiBot methodsFor: 'initialization'!addObstacleAt: aPoint width: width height:  height	|obstacle offset|	offset := self positionInWorld.	obstacle := RectangleMorph new.	self addMorph: obstacle.	^obstacle 		color: Color black;		width: width;		height: height;		position: (aPoint + offset);		yourself ! !!ArenaForMorphicWifiBot methodsFor: 'initialization'!minWidth	^ 400! !!ArenaForMorphicWifiBot methodsFor: 'initialization'!createBorders	self topBorder: RectangleMorph new.	self topBorder lock: true;		 height: 100.	self bottomBorder: self topBorder copy.	self leftBorder: RectangleMorph new.	self leftBorder lock: true;		 width: 100.	self rightBorder: self leftBorder copy.! !!ArenaForMorphicWifiBot methodsFor: 'initialization'!defaultColor	^Color yellow! !!ArenaForMorphicWifiBot methodsFor: 'initialization'!initialize	super initialize.	self createBorders.	self isClosed: false.	self clipSubmorphs: true;		 width: 400;		 height: 300! !!ArenaForMorphicWifiBot methodsFor: 'accessing'!leftBorder	^leftBorder! !!ArenaForMorphicWifiBot methodsFor: 'accessing'!mission	^mission! !!ArenaForMorphicWifiBot methodsFor: 'accessing'!bottomBorder	^bottomBorder! !!ArenaForMorphicWifiBot methodsFor: 'accessing'!obstacles 	^self submorphs! !!ArenaForMorphicWifiBot methodsFor: 'accessing'!leftBorder: anObject	leftBorder := anObject! !!ArenaForMorphicWifiBot methodsFor: 'accessing'!borders	^{self topBorder. self bottomBorder. self leftBorder. self rightBorder}! !!ArenaForMorphicWifiBot methodsFor: 'accessing'!mission: aWifiBotMission	mission := aWifiBotMission! !!ArenaForMorphicWifiBot methodsFor: 'accessing'!rightBorder: anObject	rightBorder := anObject! !!ArenaForMorphicWifiBot methodsFor: 'accessing'!topBorder	^topBorder! !!ArenaForMorphicWifiBot methodsFor: 'accessing'!topBorder: anObject	topBorder := anObject! !!ArenaForMorphicWifiBot methodsFor: 'accessing'!bottomBorder: anObject	bottomBorder := anObject! !!ArenaForMorphicWifiBot methodsFor: 'accessing'!rightBorder	^rightBorder! !!ArenaForMorphicWifiBot methodsFor: 'geometry'!extent: aPoint 	super extent: aPoint.	self updateBorderPositions! !!ArenaForMorphicWifiBot methodsFor: 'borders'!isClosed: aBoolean 	isClosed := aBoolean.	isClosed		ifTrue: [^self showBorders].	self hideBorders! !!ArenaForMorphicWifiBot methodsFor: 'borders'!isClosed	^isClosed! !!ArenaForMorphicWifiBot methodsFor: 'borders'!open	^ self isClosed: false! !!ArenaForMorphicWifiBot methodsFor: 'borders'!isOpen	^self isClosed not! !!ArenaForMorphicWifiBot methodsFor: 'borders'!close	^ self isClosed: true	! !!ArenaForMorphicWifiBot methodsFor: 'submorph management'!addMorph: aMorph 	aMorph addToArena: self! !!ArenaForMorphicWifiBot methodsFor: 'submorph management'!addWifiBotMorph: aTransformMorphWrapperForWifiBotMorph	| wifiBotMorph |	super addMorph: aTransformMorphWrapperForWifiBotMorph.	wifiBotMorph := aTransformMorphWrapperForWifiBotMorph submorphs first.	mission addBot: wifiBotMorph bot! !!ArenaForMorphicWifiBot methodsFor: 'submorph management'!removeMorph: aMorph 	aMorph removeFromArena: self! !!ArenaForMorphicWifiBot methodsFor: 'submorph management'!removeAnyMorph: aMorph	super removeMorph: aMorph! !!ArenaForMorphicWifiBot methodsFor: 'submorph management'!addAnyMorph: aMorph 	super addMorph: aMorph! !!ArenaForMorphicWifiBot methodsFor: 'submorph management'!removeWifiBotMorph: aTransformMorphWrapperForWifiBotMorph 	| wifiBotMorph |	super removeMorph: aTransformMorphWrapperForWifiBotMorph.	wifiBotMorph := aTransformMorphWrapperForWifiBotMorph submorphs first.	self mission removeBot: wifiBotMorph bot! !!ArenaForMorphicWifiBot methodsFor: 'displaying'!openInHand	super openInHand.	self updateBorderPositions! !!ArenaForMorphicWifiBot methodsFor: 'displaying'!openInWorld	super openInWorld.	self updateBorderPositions! !!ArenaForMorphicWifiBot methodsFor: 'displaying'!hideBorders	self borders		do: [:aBorder | aBorder owner == self ifTrue: [self removeMorph: aBorder]]! !!ArenaForMorphicWifiBot methodsFor: 'displaying'!showBorders	self hideBorders.	self borders		do: [:aBorder | self addMorph: aBorder].	self updateBorderPositions! !!ArenaForMorphicWifiBot methodsFor: 'displaying'!updateBorderPositions	| pixelsDisplayed |	self isOpen		ifTrue: [^ self].	pixelsDisplayed := 2.	self topBorder width: self width;		 position: self position - (0 @ self topBorder height) + (0 @ pixelsDisplayed).	self bottomBorder width: self width;		 position: self position + (0 @ self height) - (0 @ pixelsDisplayed).	self leftBorder height: self height;		 position: self position - (self leftBorder width @ 0) + (pixelsDisplayed @ 0).	self rightBorder height: self height;		 position: self position + (self width @ 0) - (pixelsDisplayed @ 0)! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ArenaForMorphicWifiBot class	instanceVariableNames: ''!!ArenaForMorphicWifiBot class methodsFor: 'examples'!demoWithSingleBot	"ClosedArenaForMorphicWifiBot demoWithSingleBot."	| mission arena bot |	mission := WifiBotMission new.	arena := ArenaForMorphicWifiBot new.	arena mission: mission.	arena		width: 600;		height: 600.	arena openInWorld.	bot := ObstacleAvoiderWifiBot morphic.	bot body openIn: arena.	bot forwardSpeed: 40.	mission start.	^ mission! !!ArenaForMorphicWifiBot class methodsFor: 'examples'!demoWithOnePathFinderBot"A demo of PathFinderBot which should stop on the target point at the center of the arenaarena := ArenaForMorphicWifiBot demoWithOnePathFinderBot.arena mission start."	| mission arena bot botBody targetPoint targetPointMorph |mission := WifiBotMission new.arena := ArenaForMorphicWifiBot new.arena mission: mission.arena extent: 600@400.arena openInWorld.arena addRandomSmallObstacles: 4.arena beSticky.targetPoint := (arena extent // 2)."show target"targetPointMorph := CircleMorph new.targetPointMorph extent: 5@5.targetPointMorph position: targetPoint.targetPointMorph openInWorld."bot := ObstacleAvoiderWifiBot morphic.bot forwardSpeed: 20."bot := PathFinderWifiBot morphic.bot forwardSpeed: 20.bot target: targetPoint.botBody := bot body.botBody openIn: arena.botBody scaleWithFactor: 0.5.botBody positionInArena: 0@0.botBody heading:90.botBody toggleSensors.botBody morph owner toggleBoundingBox.mission start.^ arena! !TransformationMorph subclass: #WifiBotTransformationMorph	instanceVariableNames: 'isBoundingBoxVisible'	classVariableNames: ''	poolDictionaries: ''	category: 'WifiBotST-Legacy-Kernel GUI'!!WifiBotTransformationMorph methodsFor: 'geometry'!computeBounds	(self hasSubmorphs and: [ self submorphs first isKindOf: WifiBotMorph ]) ifTrue: [		bounds := (transform localBoundsToGlobal: self submorphs first privateFullBounds).		^ fullBounds := bounds.	].	^ super computeBounds! !!WifiBotTransformationMorph methodsFor: 'actions'!hideBoundingBox	self boundingBoxVisible: false! !!WifiBotTransformationMorph methodsFor: 'actions'!toggleBoundingBox	self boundingBoxVisible: self isBoundingBoxVisible not! !!WifiBotTransformationMorph methodsFor: 'actions'!showBoundingBox	self boundingBoxVisible: true! !!WifiBotTransformationMorph methodsFor: 'drawing'!drawOn: aCanvas	| r |	"display the bounds of the transfo morph"	self isBoundingBoxVisible ifTrue: [		r:= RectangleMorph roundRectPrototype.		r position: self position.		r extent: (fullBounds width @ fullBounds height).		r drawOn: aCanvas.	].	"display the center of transfo morph"	"c := CircleMorph new.	c extent: 5@5.	c position: self center.	c drawOn: aCanvas."		super drawOn: aCanvas! !!WifiBotTransformationMorph methodsFor: 'accessing'!isBoundingBoxVisible	^ isBoundingBoxVisible ifNil: [ isBoundingBoxVisible := false ]! !!WifiBotTransformationMorph methodsFor: 'accessing'!boundingBoxVisible: aBool	isBoundingBoxVisible := aBool! !!WifiBotTransformationMorph methodsFor: 'accessing'!center	"Hack !!	The center of the transformMorph is the center of the icon of the bot and not the real center of the transformMorph 	"	(self hasSubmorphs and: [ self submorphs first isKindOf: WifiBotMorph ]) ifTrue: [		^ (transform localBoundsToGlobal: self submorphs first bounds) center	].	^ super center! !'From Pharo7.0.0alpha of 27 September 2018 [Build information: Pharo-7.0.0+alpha.build.1272.sha.249727c9140f03924299a3edd3411106b4b13512 (64 Bit)] on 27 September 2018 at 11:08:27.632678 am'!!TransformMorph methodsFor: '*WifiBotST-Legacy-insertion into arena'!removeFromArena: arena 	| submorph |	submorph := self submorphs first.	(submorph isKindOf: WifiBotMorph)		ifTrue: [^ arena removeWifiBotMorph: self].	arena removeAnyMorph: self! !'From Pharo7.0.0alpha of 27 September 2018 [Build information: Pharo-7.0.0+alpha.build.1272.sha.249727c9140f03924299a3edd3411106b4b13512 (64 Bit)] on 27 September 2018 at 11:08:27.63314 am'!!TransformMorph methodsFor: '*WifiBotST-Legacy-insertion into arena'!addToArena: arena 	| submorph |	submorph := self submorphs first.	(submorph isKindOf: WifiBotMorph) ifTrue: [^arena addWifiBotMorph: self].	arena addAnyMorph: self! !'From Pharo7.0.0alpha of 27 September 2018 [Build information: Pharo-7.0.0+alpha.build.1272.sha.249727c9140f03924299a3edd3411106b4b13512 (64 Bit)] on 27 September 2018 at 11:08:27.633375 am'!!Morph methodsFor: '*WifiBotST-Legacy-insertion into arena'!removeFromArena: arena	arena removeAnyMorph: self! !'From Pharo7.0.0alpha of 27 September 2018 [Build information: Pharo-7.0.0+alpha.build.1272.sha.249727c9140f03924299a3edd3411106b4b13512 (64 Bit)] on 27 September 2018 at 11:08:27.633504 am'!!Morph methodsFor: '*WifiBotST-Legacy-insertion into arena'!addToArena: arena 	arena addAnyMorph: self! !'From Pharo7.0.0alpha of 27 September 2018 [Build information: Pharo-7.0.0+alpha.build.1272.sha.249727c9140f03924299a3edd3411106b4b13512 (64 Bit)] on 27 September 2018 at 11:08:27.63358 am'!!Morph methodsFor: '*WifiBotST-Legacy-geometry'!centerInWorld	^self pointInWorld: self center! !'From Pharo7.0.0alpha of 27 September 2018 [Build information: Pharo-7.0.0+alpha.build.1272.sha.249727c9140f03924299a3edd3411106b4b13512 (64 Bit)] on 27 September 2018 at 11:08:27.633665 am'!!Morph methodsFor: '*WifiBotST-Legacy-geometry'!centerInWorld: aPoint	self center: (self point: aPoint from: self world)! !