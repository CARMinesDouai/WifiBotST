TestCase subclass: #AbstractWifiBotTest	instanceVariableNames: 'bot botBody arena obstacle'	classVariableNames: ''	poolDictionaries: ''	category: 'WifiBotST-Kernel-Test'!!AbstractWifiBotTest methodsFor: 'setUp-tearDown'!tearDown	arena delete! !!AbstractWifiBotTest methodsFor: 'setUp-tearDown'!setUp	super setUp.	bot := self botClass morphic.	botBody := bot body.	arena := RectangleMorph new.	arena		color: Color yellow;		width: World width;		height: World height.	arena openInWorld.	obstacle := RectangleMorph new.	arena addMorph: obstacle.	botBody openIn: arena! !!AbstractWifiBotTest methodsFor: 'setUp-tearDown'!botClass	^ self subclassResponsibility ! !AbstractWifiBotBodyTest subclass: #RealWifiBotBodyTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'WifiBotST-Kernel-Test'!!RealWifiBotBodyTest methodsFor: 'running'!testMoveForward	self		testForwardSpeed: 30		leadsToMotorsSpeed: 30		andValue: 222! !!RealWifiBotBodyTest methodsFor: 'running'!testForwardSpeed: providedSpeed leadsToMotorsSpeed: expectedSpeed andValue: expectedValue 	botBody forwardSpeed: providedSpeed rotationSpeed: 0.	self assertLeftSpeed: expectedSpeed rightSpeed: expectedSpeed.	self assert: (botBody motorValues at: 1) = expectedValue.	self assert: (botBody motorValues at: 2) = expectedValue! !!RealWifiBotBodyTest methodsFor: 'running'!testMinForward	self		testForwardSpeed: botBody minAbsoluteSpeed 		leadsToMotorsSpeed: botBody minAbsoluteSpeed		andValue: botBody minMotorForwardValue! !!RealWifiBotBodyTest methodsFor: 'running'!testMinBackward	self		testForwardSpeed: -1		leadsToMotorsSpeed: -1		andValue: 129! !!RealWifiBotBodyTest methodsFor: 'running'!testTurnOnItself	| rotationSpeed |	rotationSpeed := botBody minAbsoluteSpeed.	botBody forwardSpeed: 0 rotationSpeed: rotationSpeed.	self assert: botBody leftMotorSpeed = rotationSpeed.	self assert: botBody rightMotorSpeed = rotationSpeed negated! !!RealWifiBotBodyTest methodsFor: 'running'!assertLeftSpeed: leftSpeed rightSpeed: rightSpeed 	self assert: botBody leftMotorSpeed = leftSpeed.	self assert: botBody rightMotorSpeed = rightSpeed! !!RealWifiBotBodyTest methodsFor: 'running'!testMaxForward	self		testForwardSpeed: 100		leadsToMotorsSpeed: 40		andValue: 232! !!RealWifiBotBodyTest methodsFor: 'running'!testMoveWhileTurningAt: rotationSpeed 	botBody forwardSpeed: 10 rotationSpeed: rotationSpeed.	self assert: botBody leftMotorSpeed = (10 - rotationSpeed).	self assert: botBody rightMotorSpeed = (10 + rotationSpeed)! !!RealWifiBotBodyTest methodsFor: 'running'!testMoveBackward	self		testForwardSpeed: -30		leadsToMotorsSpeed: -30		andValue: 158! !!RealWifiBotBodyTest methodsFor: 'running'!testMaxBackward	self		testForwardSpeed: -100		leadsToMotorsSpeed: -40		andValue: 168! !!RealWifiBotBodyTest methodsFor: 'running'!tearDown			! !!RealWifiBotBodyTest methodsFor: 'setUp-tearDown'!botBodyClass	^ RealWifiBotBody! !!RealWifiBotBodyTest methodsFor: 'tests'!testTurnToRight	botBody forwardSpeed: 10 rotationSpeed: 90.	self assertLeftSpeed: 40 rightSpeed: -40! !!RealWifiBotBodyTest methodsFor: 'tests'!testTurnToLeft	botBody forwardSpeed: 10 rotationSpeed: -90.	self assertLeftSpeed: -40 rightSpeed: 40! !AbstractWifiBotTest subclass: #WifiBotMissionTest	instanceVariableNames: 'mission'	classVariableNames: ''	poolDictionaries: ''	category: 'WifiBotST-Kernel-Test'!!WifiBotMissionTest methodsFor: 'running'!testPauseResume	| delay stepCountOnPause |	delay := Delay forMilliseconds: mission steppingDelayMilliseconds * 3.	mission start.	3 timesRepeat: [mission pause.	self deny: mission isRunning.	stepCountOnPause := bot stepCount.	delay wait.	self assert: bot stepCount = stepCountOnPause.	mission resume.	delay wait.	self assert: mission isRunning.	self assert: bot stepCount >= (stepCountOnPause + 2)]! !!WifiBotMissionTest methodsFor: 'running'!testStep	1 to: 10 do: [:expectedCount| mission step.	self assert: bot stepCount = expectedCount]! !!WifiBotMissionTest methodsFor: 'running'!testStop	| delay expectedProcessCount stepCountAfterStop |	expectedProcessCount := self processCount.	mission start.	mission stop.	self deny: mission isRunning.	stepCountAfterStop := bot stepCount.	self assert: self processCount = expectedProcessCount.	delay := Delay forMilliseconds: mission steppingDelayMilliseconds * 3.	delay wait.	self deny: mission isRunning.	self assert: bot stepCount = stepCountAfterStop.	self assert: self processCount = expectedProcessCount! !!WifiBotMissionTest methodsFor: 'running'!processCount	| nonTerminatedProcesses |	nonTerminatedProcesses := Process allInstances		reject: [:process | process isTerminated].	^nonTerminatedProcesses size! !!WifiBotMissionTest methodsFor: 'running'!testStart	| delay expectedProcessCount |	bot stepCount: 10.	expectedProcessCount := self processCount + 1.	mission start.	self assert: mission isRunning.	self assert: mission resetCount = 1.	self assert: self processCount = expectedProcessCount.	delay := Delay forMilliseconds: mission steppingDelayMilliseconds * 3.	delay wait.	self assert: bot stepCount >= 2.	self assert: mission resetCount = 1.	self assert: mission isRunning! !!WifiBotMissionTest methodsFor: 'setUp-tearDown'!tearDown	super tearDown.	mission stop! !!WifiBotMissionTest methodsFor: 'setUp-tearDown'!setUp	super setUp.	mission := WifiBotStepCounterMission bots: {  bot}! !!WifiBotMissionTest methodsFor: 'setUp-tearDown'!botClass	^ WifiBotStepCounter! !WifiBotMissionTest subclass: #WifiBotMissionThreadTest	instanceVariableNames: 'missionThread'	classVariableNames: ''	poolDictionaries: ''	category: 'WifiBotST-Kernel-Test'!!WifiBotMissionThreadTest methodsFor: 'setUp-tearDown'!tearDown	super tearDown.	missionThread terminate! !!WifiBotMissionThreadTest methodsFor: 'running'!testMultipleStartsDoNotCreateManyThreads	mission start.	missionThread := mission steppingProcess.	mission start.	self assert: mission steppingProcess == missionThread! !!WifiBotMissionThreadTest methodsFor: 'running'!testMultipleResumesDoNotCreateManyThreads	mission resume.	missionThread := mission steppingProcess.	mission resume.	self assert: mission steppingProcess == missionThread! !TestCase subclass: #WifiBotMorphTest	instanceVariableNames: 'botMorph'	classVariableNames: ''	poolDictionaries: ''	category: 'WifiBotST-Kernel-Test'!!WifiBotMorphTest methodsFor: 'setUp'!setUp	botMorph := WifiBotMorph new.	botMorph openInWorld! !!WifiBotMorphTest methodsFor: 'setUp'!tearDown	botMorph delete! !!WifiBotMorphTest methodsFor: 'tests'!testHideSensors	botMorph hideSensors.	self assert: botMorph clipSubmorphs! !!WifiBotMorphTest methodsFor: 'tests'!testShowSensors	botMorph showSensors.	self deny: botMorph clipSubmorphs.! !!WifiBotMorphTest methodsFor: 'tests'!testSensorPositions	| leftSensorPosition rightSensorPosition sensorExpectedY botMorphPosition |	botMorphPosition := botMorph positionInArena.	sensorExpectedY := botMorphPosition y - botMorph leftObstacleSensor height.	leftSensorPosition := botMorph leftObstacleSensor positionInWorld.	self assert: leftSensorPosition x = botMorphPosition x.	self assert: leftSensorPosition y = sensorExpectedY.	rightSensorPosition := botMorph rightObstacleSensor positionInWorld.	self assert: rightSensorPosition x = (botMorphPosition x + (botMorph width / 2) + 1).	self assert: rightSensorPosition y = sensorExpectedY! !TestCase subclass: #WifiBotSimulationTest	instanceVariableNames: 'scenario'	classVariableNames: ''	poolDictionaries: ''	category: 'WifiBotST-Kernel-Test'!!WifiBotSimulationTest methodsFor: 'testing'!testStartStop	self deny: scenario mission isRunning.	scenario start.	self assert: scenario mission isRunning.	scenario stop.	self deny: scenario mission isRunning.! !!WifiBotSimulationTest methodsFor: 'testing'!testResetMovesRobotsToTheirInitialPositions	| initialCenter bot |	scenario show.	bot := scenario addRobotInstanceOf: ObstacleAvoiderWifiBot  atPosition: 100@100.	bot forwardSpeed: 100.	initialCenter := bot body morph centerInArena.	self assert: initialCenter = (100@100).	scenario start.	(Delay forMilliseconds: 300) wait.	scenario stop.	self deny: bot body morph centerInArena = initialCenter.	scenario reset.	self assert: bot body morph centerInArena = initialCenter.	! !!WifiBotSimulationTest methodsFor: 'testing'!testAdditionOfRobotGivenAnInstance	| bot |	bot := ObstacleAvoiderWifiBot morphic.	scenario addRobot: bot atPosition: 100@100.	self assert: scenario mission bots = {bot} asSet.	self assert: (scenario arena submorphs includes:  bot body morph owner).	self assert: (scenario robotInitialPositionsDict at: bot ) = (100@100)	! !!WifiBotSimulationTest methodsFor: 'testing'!testAdditionOfLightBulbs 	| bulb |	bulb := scenario addLightBulbAt: 100@100 color: Color green.	self deny: bulb isNil.	self assert: scenario arena lightBulbs = {bulb} asSet	! !!WifiBotSimulationTest methodsFor: 'testing'!testAdditionOfRobotGivenAClass	| bot |	bot :=  scenario addRobotInstanceOf: ObstacleAvoiderWifiBot atPosition: 100@100.	self deny: bot isNil.	self assert: bot class == ObstacleAvoiderWifiBot.	self assert: scenario mission bots = {bot} asSet.	self assert: (scenario arena submorphs includes:  bot body morph owner).	self assert: (scenario robotInitialPositionsDict at: bot ) = (100@100)! !!WifiBotSimulationTest methodsFor: 'setUp-tearDown'!setUp 	super setUp.	scenario := WifiBotSimulation new! !!WifiBotSimulationTest methodsFor: 'setUp-tearDown'!tearDown 	super tearDown.	scenario stop; hide! !WifiBot subclass: #WifiBotStepCounter	instanceVariableNames: 'stepCount'	classVariableNames: ''	poolDictionaries: ''	category: 'WifiBotST-Kernel-Test'!!WifiBotStepCounter methodsFor: 'initialize-release'!initialize	super initialize.	self stepCount: 0! !!WifiBotStepCounter methodsFor: 'stepping'!step	self stepCount: self stepCount + 1! !!WifiBotStepCounter methodsFor: 'accessing'!stepCount: anObject	stepCount := anObject! !!WifiBotStepCounter methodsFor: 'accessing'!stepCount	^stepCount! !WifiBotMission subclass: #WifiBotStepCounterMission	instanceVariableNames: 'resetCount'	classVariableNames: ''	poolDictionaries: ''	category: 'WifiBotST-Kernel-Test'!!WifiBotStepCounterMission methodsFor: 'accessing'!resetCount	^resetCount! !!WifiBotStepCounterMission methodsFor: 'accessing'!resetCount: anObject	resetCount := anObject! !!WifiBotStepCounterMission methodsFor: 'initialize-release'!initialize	super initialize.	self resetCount: 0! !!WifiBotStepCounterMission methodsFor: 'running'!reset	self resetCount: self resetCount + 1.	self bots		do: [:bot | bot stepCount: 0]! !Object subclass: #WifiBot	instanceVariableNames: 'body'	classVariableNames: ''	poolDictionaries: ''	category: 'WifiBotST-Kernel'!!WifiBot methodsFor: 'stepping'!step	self subclassResponsibility ! !!WifiBot methodsFor: 'accessing'!body	^body! !!WifiBot methodsFor: 'accessing'!body: anObject 	body := anObject.	body bot: self! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!WifiBot class	instanceVariableNames: ''!!WifiBot class methodsFor: 'instance creation'!on: aWifiBotBody	^self new		body: aWifiBotBody;		yourself! !!WifiBot class methodsFor: 'instance creation'!morphic	^ self on: self morphicBodyClass new! !!WifiBot class methodsFor: 'instance creation'!realBodyClass	^ RealWifiBotBody ! !!WifiBot class methodsFor: 'instance creation'!bodyIp: ipAddressArray 	| body |	body := self realBodyClass ip: ipAddressArray.	^ self on: body! !!WifiBot class methodsFor: 'instance creation'!morphicBodyClass	^MorphicWifiBotBody ! !WifiBot subclass: #SimpleReactiveWifiBot	instanceVariableNames: 'forwardSpeed rotationSpeed'	classVariableNames: ''	poolDictionaries: ''	category: 'WifiBotST-Kernel'!!SimpleReactiveWifiBot commentStamp: '' prior: 0!A SimpleReactiveWifiBot is a wifibot which step is a sequence :-updateSensorValues-computeActuatorValues-commitActuatorValuesExamplebot := SimpleReactiveWifiBot bodyIp: #[192 168 0 130].bot forwardSpeed: 100; rotationSpeed: 20.1 to: 10 do: [bot step]!!SimpleReactiveWifiBot methodsFor: 'initialize-release'!initialize	super initialize.	self forwardSpeed: 0.	self rotationSpeed: 0! !!SimpleReactiveWifiBot methodsFor: 'stepping'!step	self body updateSensorValues.	self computeActuatorValues.	self body commitActuatorValues! !!SimpleReactiveWifiBot methodsFor: 'stepping'!computeActuatorValues	"Subclasses may redefine this method"	self body forwardSpeed: self forwardSpeed rotationSpeed: self rotationSpeed! !!SimpleReactiveWifiBot methodsFor: 'accessing'!rotationSpeed: anObject	rotationSpeed := anObject! !!SimpleReactiveWifiBot methodsFor: 'accessing'!forwardSpeed	^forwardSpeed! !!SimpleReactiveWifiBot methodsFor: 'accessing'!forwardSpeed: positiveInteger 	forwardSpeed := positiveInteger! !!SimpleReactiveWifiBot methodsFor: 'accessing'!rotationSpeed	^rotationSpeed! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SimpleReactiveWifiBot class	instanceVariableNames: ''!!SimpleReactiveWifiBot class methodsFor: 'example'!startRotateInPlace130Ethernet	<example>	| bot |	bot := SimpleReactiveWifiBot bodyIp: #[192 168 0 130].	bot forwardSpeed: 0;		rotationSpeed: 10.		bot step! !!SimpleReactiveWifiBot class methodsFor: 'example'!startRotateInPlace132Wifi	<example>	| bot |	bot := SimpleReactiveWifiBot bodyIp: #[192 168 1 132].	bot forwardSpeed: 0;		rotationSpeed: 10.		bot step! !!SimpleReactiveWifiBot class methodsFor: 'example'!stop130Ethernet	<example>	| bot |	bot := SimpleReactiveWifiBot bodyIp: #[192 168 0 130].	bot forwardSpeed: 0;		rotationSpeed: 0.		bot step! !!SimpleReactiveWifiBot class methodsFor: 'example'!stop132Wifi	<example>	| bot |	bot := SimpleReactiveWifiBot bodyIp: #[192 168 1 132].	bot forwardSpeed: 0;		rotationSpeed: 0.		bot step! !!SimpleReactiveWifiBot class methodsFor: 'example'!startGoForward130Ethernet	<example>	| bot |	bot := SimpleReactiveWifiBot bodyIp: #[192 168 0 130].	bot forwardSpeed: 10;		rotationSpeed: 0.		bot step! !!SimpleReactiveWifiBot class methodsFor: 'example'!startGoForward132Wifi	<example>	| bot |	bot := SimpleReactiveWifiBot bodyIp: #[192 168 1 132].	bot forwardSpeed: 10;		rotationSpeed: 0.		bot step! !Object subclass: #WifiBotBody	instanceVariableNames: 'bot'	classVariableNames: ''	poolDictionaries: ''	category: 'WifiBotST-Kernel'!!WifiBotBody commentStamp: '' prior: 0!WifiBotBody is the abstract class for WifiBot body.!!WifiBotBody methodsFor: 'running'!updateSensorValues	self subclassResponsibility! !!WifiBotBody methodsFor: 'running'!commitActuatorValues	self subclassResponsibility! !!WifiBotBody methodsFor: 'moving'!forwardSpeed: forwardSpeed rotationSpeed: rotationSpeed	self subclassResponsibility ! !!WifiBotBody methodsFor: 'accessing'!bot	^bot! !!WifiBotBody methodsFor: 'accessing'!bot: anObject	bot := anObject! !!WifiBotBody methodsFor: 'sensing'!distanceToLeftObstacles	self subclassResponsibility! !!WifiBotBody methodsFor: 'sensing'!distanceToRightObstacles	self subclassResponsibility! !!WifiBotBody methodsFor: 'sensing'!frontRightWheelSpeed	self subclassResponsibility! !!WifiBotBody methodsFor: 'sensing'!maxWheelSpeed	^40! !!WifiBotBody methodsFor: 'sensing'!rearRightWheelSpeed	self subclassResponsibility! !!WifiBotBody methodsFor: 'sensing'!rearLeftWheelSpeed	self subclassResponsibility! !!WifiBotBody methodsFor: 'sensing'!frontLeftWheelSpeed	self subclassResponsibility ! !!WifiBotBody methodsFor: 'sensing'!currentPositionRelativeToOrigin	self subclassResponsibility! !!WifiBotBody methodsFor: 'sensing'!batteryLevel	self subclassResponsibility! !!WifiBotBody methodsFor: 'sensing'!wheelSpeeds	^{self frontLeftWheelSpeed. self rearLeftWheelSpeed. self frontRightWheelSpeed. self rearRightWheelSpeed}! !!WifiBotBody methodsFor: 'sensing'!maxForwardSpeed	^ 60! !!WifiBotBody methodsFor: 'initialize-release'!defaultRotationSpeed	^ 0! !!WifiBotBody methodsFor: 'initialize-release'!defaultForwardSpeed	^ 0! !!WifiBotBody methodsFor: 'initialize-release'!initialize	super initialize.	self forwardSpeed: self defaultForwardSpeed rotationSpeed: self defaultRotationSpeed! !WifiBotBody subclass: #RealWifiBotBody	instanceVariableNames: 'ip socket sensorValues motorValues'	classVariableNames: ''	poolDictionaries: ''	category: 'WifiBotST-Kernel'!!RealWifiBotBody commentStamp: '' prior: 0!A WifiBotHardware is the reification of the physical WifiBot.Instance Variables	botIp:		<ByteArray with 4 bytes>	motorValues:		<ByteArray with 2 bytes>	sensorValues:		<ByteArray with 7 bytes>	socket:		<Socket>botIp	- IP to access the robotmotorValues	- Bytes that are to send to the motor to set the speed and the orientation of the motors. First element = left motor. Second element = right motorsensorValues	- Bytes that are read from the sensorssocket	- Connects to the actual bot!!RealWifiBotBody methodsFor: 'running'!defaultRetryTimes	^3! !!RealWifiBotBody methodsFor: 'running'!writeMotorsAndReadSensorsOnDisconnectionRetry: attempts 		[self socket sendData: self motorValues.	^self socket receiveDataInto: self sensorValues ] 		on: ConnectionTimedOut		do: [ :ex | attempts = 1 ifTrue: [ ex signal ] ].	(Delay forMilliseconds: self millisecondsBetweenReadWriteAttempts) wait.	self writeMotorsAndReadSensorsOnDisconnectionRetry: attempts - 1! !!RealWifiBotBody methodsFor: 'running'!updateSensorValues	"Need to send data to the bot before getting sensor values"	self writeMotorsAndReadSensorsOnDisconnectionRetry: self defaultRetryTimes! !!RealWifiBotBody methodsFor: 'running'!commitActuatorValues	self writeMotorsAndReadSensorsOnDisconnectionRetry: self defaultRetryTimes! !!RealWifiBotBody methodsFor: 'running'!millisecondsBetweenReadWriteAttempts	^1000! !!RealWifiBotBody methodsFor: 'accessing'!ip	^ ip! !!RealWifiBotBody methodsFor: 'accessing'!ip: ipAddressArray 	ip := ipAddressArray asByteArray! !!RealWifiBotBody methodsFor: 'accessing'!socket	(socket isNil or: [socket isConnected not])		ifTrue: [self initSocket].	^ socket! !!RealWifiBotBody methodsFor: 'initialize-release'!finalize	super finalize.	socket ifNotNil: [socket closeAndDestroy]! !!RealWifiBotBody methodsFor: 'initialize-release'!initSocket	Socket initializeNetwork.	socket := Socket newTCP.	socket connectTo: self ip asByteArray port: 15000.	socket waitForConnectionFor: 10! !!RealWifiBotBody methodsFor: 'initialize-release'!initialize	self motorValues: (ByteArray new: 2).	super initialize.	self sensorValues: (ByteArray new: 7)! !!RealWifiBotBody methodsFor: 'moving'!leftMotorSpeed	| leftMotorValue |	leftMotorValue := self motorValues at: 1.	^self speedFromMotorValue: leftMotorValue! !!RealWifiBotBody methodsFor: 'moving'!maxMotorBackwardValue	"Bit 8 (highest) set to 1 for control	Bit 7 set 1 for forward speed	Rest for the actual speed 0-40 with control and 0-60 without control (bit 8 set to 0)		here we use control	"	^ 168! !!RealWifiBotBody methodsFor: 'moving'!forwardSpeed: forwardSpeed rotationSpeed: rotationSpeed 	| leftSpeed rightSpeed leftSpeedNormalized rightSpeedNormalized |	leftSpeed := forwardSpeed + rotationSpeed.	rightSpeed := forwardSpeed - rotationSpeed.	leftSpeedNormalized := self normalizedSpeedFrom: leftSpeed.	rightSpeedNormalized := self normalizedSpeedFrom: rightSpeed.	self leftMotorSpeed: leftSpeedNormalized rightMotorSpeed: rightSpeedNormalized! !!RealWifiBotBody methodsFor: 'moving'!motorValues	^ motorValues! !!RealWifiBotBody methodsFor: 'moving'!motorValues: twoByteArray	motorValues := twoByteArray! !!RealWifiBotBody methodsFor: 'moving'!maxAbsoluteSpeed	^ 40! !!RealWifiBotBody methodsFor: 'moving'!motorValueFromNegativeSpeed: motorSpeed 	| rawValue |	rawValue := motorSpeed abs + self minMotorBackwardValue.	^ rawValue min: self maxMotorBackwardValue! !!RealWifiBotBody methodsFor: 'moving'!motorValueFromPositiveSpeed: motorSpeed 	| rawValue |	rawValue := motorSpeed + self minMotorForwardValue.	^ rawValue min: self maxMotorForwardValue! !!RealWifiBotBody methodsFor: 'moving'!motorValueFromSpeed: speed 	speed >= 0		ifTrue: [^ self motorValueFromPositiveSpeed: speed].	^ self motorValueFromNegativeSpeed: speed! !!RealWifiBotBody methodsFor: 'moving'!maxMotorForwardValue	"Bit 8 (highest) set to 1 for control	Bit 7 set 1 for forward speed	Rest for the actual speed 0-40 with control and 0-60 without control (bit 8 set to 0)		Here we use control"	^ 232! !!RealWifiBotBody methodsFor: 'moving'!rightMotorSpeed	| rightMotorValue |	rightMotorValue := self motorValues at: 2.	^ self speedFromMotorValue: rightMotorValue! !!RealWifiBotBody methodsFor: 'moving'!speedFromMotorValue: motorValue 	motorValue <= self maxMotorBackwardValue ifTrue: [^ motorValue negated + self minMotorBackwardValue].	^ motorValue - self minMotorForwardValue! !!RealWifiBotBody methodsFor: 'moving'!leftMotorSpeed: leftSpeed rightMotorSpeed: rightSpeed 	| leftMotorValue rightMotorSpeed |	leftMotorValue := self motorValueFromSpeed: leftSpeed.	rightMotorSpeed := self motorValueFromSpeed: rightSpeed.	self motorValues at: 1 put: leftMotorValue;		 at: 2 put: rightMotorSpeed! !!RealWifiBotBody methodsFor: 'moving'!normalizedSpeedFrom: speed 	"Answers a speed that actually allows moving the bot. If the speed is too low the bot don'''t move because of high friction"	| normilzedSpeedAbs |	speed = 0		ifTrue: [^ 0].	normilzedSpeedAbs := speed abs min: self maxAbsoluteSpeed.	^ speed sign * normilzedSpeedAbs! !!RealWifiBotBody methodsFor: 'moving'!minAbsoluteSpeed	^ 0! !!RealWifiBotBody methodsFor: 'moving'!minMotorForwardValue	^ 192! !!RealWifiBotBody methodsFor: 'moving'!minMotorBackwardValue	^ 128! !!RealWifiBotBody methodsFor: 'sensing'!distanceToLeftObstacles	self leftWheelSpeedsAreDifferent ifTrue: [^0].	^ 150		- (self sensorValues at: 6)! !!RealWifiBotBody methodsFor: 'sensing'!distanceToRightObstacles	self rightWheelSpeedsAreDifferent		ifTrue: [^ 0].	^ 150		- (self sensorValues at: 7)! !!RealWifiBotBody methodsFor: 'sensing'!frontRightWheelSpeed	"Unit = ticks"	"max 40 ticks / 41 ms == max about 1 tick per ms"	^ self sensorValues at: 4! !!RealWifiBotBody methodsFor: 'sensing'!rearRightWheelSpeed	"Unit = ticks"	"max 40 ticks / 41 ms == max about 1 tick per ms"	^ self sensorValues at: 5! !!RealWifiBotBody methodsFor: 'sensing'!sensorValues: valuesByteArray	^ sensorValues := valuesByteArray ! !!RealWifiBotBody methodsFor: 'sensing'!rearLeftWheelSpeed	"Unit = ticks"	"max 40 ticks / 41 ms == max about 1 tick per ms"	^ self sensorValues at: 3! !!RealWifiBotBody methodsFor: 'sensing'!frontLeftWheelSpeed	"Unit = ticks"	"max 40 ticks / 41 ms == max about 1 tick per ms"	^self sensorValues at: 2! !!RealWifiBotBody methodsFor: 'sensing'!batteryLevel	^self sensorValues at: 1! !!RealWifiBotBody methodsFor: 'sensing'!sensorValues	^sensorValues! !!RealWifiBotBody methodsFor: 'sensing'!wheelSpeeds	^self sensorValues copyFrom: 2 to: 5! !!RealWifiBotBody methodsFor: 'sensing'!rightWheelSpeedsAreDifferent	^ (self frontRightWheelSpeed - self rearRightWheelSpeed) abs > 5! !!RealWifiBotBody methodsFor: 'sensing'!leftWheelSpeedsAreDifferent	^ (self frontLeftWheelSpeed - self rearLeftWheelSpeed) abs > 5! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!RealWifiBotBody class	instanceVariableNames: ''!!RealWifiBotBody class methodsFor: 'instance creation'!ip: ipAddressArray	^self new		ip: ipAddressArray;		yourself! !Object subclass: #WifiBotMission	instanceVariableNames: 'bots isRunning isRunningLock steppingDelayMilliseconds steppingProcess steppingDelay'	classVariableNames: ''	poolDictionaries: ''	category: 'WifiBotST-Kernel'!!WifiBotMission commentStamp: '' prior: 0!A WifiBotMission manages the robots stepping process that makes the robots move and act.Instance Variables	bots:		<Set of WifiBot>	isRunning:		<Boolean>	isRunningLock:		<Semaphore>	steppingDelay:		<Delay>	steppingDelayMilliseconds:		<Interger>	steppingProcess:		<Process>bots	- Set of bots that areisRunning	- Flag set to true while missing is running and to false otherwiseisRunningLock	- Semaphore that synchronizes the isRunning flag reads and writessteppingDelay	- Delay between to step message sends to all robotssteppingDelayMilliseconds	- Duration of the delay between two stepssteppingProcess	- Process that repeatedly sends step to every bot!!WifiBotMission methodsFor: 'accessing'!bots: aCollection	bots addAll: aCollection! !!WifiBotMission methodsFor: 'accessing'!addBot: aWifiBot 	self bots add: aWifiBot! !!WifiBotMission methodsFor: 'accessing'!isRunning: boolean 	isRunningLock critical: [isRunning := boolean]! !!WifiBotMission methodsFor: 'accessing'!isRunning	^isRunningLock				critical: [isRunning]! !!WifiBotMission methodsFor: 'accessing'!steppingDelayMilliseconds: anObject	steppingDelayMilliseconds := anObject! !!WifiBotMission methodsFor: 'accessing'!steppingProcess	^steppingProcess! !!WifiBotMission methodsFor: 'accessing'!steppingDelay: anObject	steppingDelay := anObject! !!WifiBotMission methodsFor: 'accessing'!steppingDelay	^ steppingDelay! !!WifiBotMission methodsFor: 'accessing'!steppingProcess: anObject	steppingProcess := anObject! !!WifiBotMission methodsFor: 'accessing'!steppingProcessIsTerminated	self steppingProcess ifNil: [^true].	^self steppingProcess isTerminated! !!WifiBotMission methodsFor: 'accessing'!removeBot: aWifiBot 	self bots remove: aWifiBot ifAbsent: []! !!WifiBotMission methodsFor: 'accessing'!bots	^ bots! !!WifiBotMission methodsFor: 'accessing'!steppingDelayMilliseconds	^steppingDelayMilliseconds! !!WifiBotMission methodsFor: 'running-private'!resume	| newProcess |	self isRunning ifTrue: [ ^ self ].	self resetSteppingDelay.	self isRunning: true.	newProcess := 	[ self run.	self stopAllBots ] newProcess.	self steppingProcess: newProcess.	newProcess resume! !!WifiBotMission methodsFor: 'running-private'!stopAllBots	^ self bots do: 		[ :bot | 		bot body 			forwardSpeed: 0			rotationSpeed: 0.		bot body commitActuatorValues ]! !!WifiBotMission methodsFor: 'running-private'!reset	^self! !!WifiBotMission methodsFor: 'running-private'!resetSteppingDelay	self steppingDelay: (Delay forMilliseconds: self steppingDelayMilliseconds)! !!WifiBotMission methodsFor: 'running-private'!run	[ self isRunning ] whileTrue: 		[ self step.		self steppingDelay wait ]! !!WifiBotMission methodsFor: 'running-private'!pause	self isRunning: false! !!WifiBotMission methodsFor: 'initialize-release'!initialize	super initialize.	bots := IdentitySet new.	isRunningLock := Semaphore forMutualExclusion.	self steppingDelayMilliseconds: self defaultSteppingDelayMilliseconds.	self isRunning: false! !!WifiBotMission methodsFor: 'initialize-release'!defaultSteppingDelayMilliseconds	^ 100! !!WifiBotMission methodsFor: 'running-public'!stop	self isRunning: false.	[self steppingProcessIsTerminated]		whileFalse: [Processor yield]! !!WifiBotMission methodsFor: 'running-public'!start	self reset.	self resume! !!WifiBotMission methodsFor: 'running-public'!step	self bots do: [:bot| bot step]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!WifiBotMission class	instanceVariableNames: ''!!WifiBotMission class methodsFor: 'instance creation'!bots: collectionOfBots 	^ self new bots: collectionOfBots;		 yourself! !!WifiBotMission class methodsFor: 'instance creation'!bot: aWifiBot	^ self new addBot: aWifiBot;		yourself! !!WifiBotMission class methodsFor: 'examples'!singleBot130Ethernet5SecondsMission	<example>	| bot mission |	bot := SimpleReactiveWifiBot bodyIp: #[192 168 0 130].	bot forwardSpeed: 10;		rotationSpeed: 0.		mission := self bot: bot.	[mission start.	5 seconds wait] ensure: [mission stop.]! !